/*
 * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

//
// Autogenerated by Thrift Compiler (0.15.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
/* eslint-disable */
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');


var ttypes = require('./remote_controller_types');
//HELPER FUNCTIONS AND STRUCTURES

var RemoteController_ping_args = function(args) {
};
RemoteController_ping_args.prototype = {};
RemoteController_ping_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoteController_ping_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteController_ping_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RemoteController_ping_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
RemoteController_ping_result.prototype = {};
RemoteController_ping_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoteController_ping_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteController_ping_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RemoteController_clean_args = function(args) {
};
RemoteController_clean_args.prototype = {};
RemoteController_clean_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoteController_clean_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteController_clean_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RemoteController_clean_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
RemoteController_clean_result.prototype = {};
RemoteController_clean_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoteController_clean_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteController_clean_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RemoteController_exit_args = function(args) {
};
RemoteController_exit_args.prototype = {};
RemoteController_exit_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoteController_exit_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteController_exit_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RemoteController_exit_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
RemoteController_exit_result.prototype = {};
RemoteController_exit_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoteController_exit_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteController_exit_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RemoteController_createCluster_args = function(args) {
  this.hzVersion = null;
  this.xmlconfig = null;
  if (args) {
    if (args.hzVersion !== undefined && args.hzVersion !== null) {
      this.hzVersion = args.hzVersion;
    }
    if (args.xmlconfig !== undefined && args.xmlconfig !== null) {
      this.xmlconfig = args.xmlconfig;
    }
  }
};
RemoteController_createCluster_args.prototype = {};
RemoteController_createCluster_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.hzVersion = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.xmlconfig = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoteController_createCluster_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteController_createCluster_args');
  if (this.hzVersion !== null && this.hzVersion !== undefined) {
    output.writeFieldBegin('hzVersion', Thrift.Type.STRING, 1);
    output.writeString(this.hzVersion);
    output.writeFieldEnd();
  }
  if (this.xmlconfig !== null && this.xmlconfig !== undefined) {
    output.writeFieldBegin('xmlconfig', Thrift.Type.STRING, 2);
    output.writeString(this.xmlconfig);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RemoteController_createCluster_result = function(args) {
  this.success = null;
  this.serverException = null;
  if (args instanceof ttypes.ServerException) {
    this.serverException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Cluster(args.success);
    }
    if (args.serverException !== undefined && args.serverException !== null) {
      this.serverException = args.serverException;
    }
  }
};
RemoteController_createCluster_result.prototype = {};
RemoteController_createCluster_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Cluster();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.serverException = new ttypes.ServerException();
        this.serverException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoteController_createCluster_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteController_createCluster_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.serverException !== null && this.serverException !== undefined) {
    output.writeFieldBegin('serverException', Thrift.Type.STRUCT, 1);
    this.serverException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RemoteController_createClusterKeepClusterName_args = function(args) {
  this.hzVersion = null;
  this.xmlconfig = null;
  if (args) {
    if (args.hzVersion !== undefined && args.hzVersion !== null) {
      this.hzVersion = args.hzVersion;
    }
    if (args.xmlconfig !== undefined && args.xmlconfig !== null) {
      this.xmlconfig = args.xmlconfig;
    }
  }
};
RemoteController_createClusterKeepClusterName_args.prototype = {};
RemoteController_createClusterKeepClusterName_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.hzVersion = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.xmlconfig = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoteController_createClusterKeepClusterName_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteController_createClusterKeepClusterName_args');
  if (this.hzVersion !== null && this.hzVersion !== undefined) {
    output.writeFieldBegin('hzVersion', Thrift.Type.STRING, 1);
    output.writeString(this.hzVersion);
    output.writeFieldEnd();
  }
  if (this.xmlconfig !== null && this.xmlconfig !== undefined) {
    output.writeFieldBegin('xmlconfig', Thrift.Type.STRING, 2);
    output.writeString(this.xmlconfig);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RemoteController_createClusterKeepClusterName_result = function(args) {
  this.success = null;
  this.serverException = null;
  if (args instanceof ttypes.ServerException) {
    this.serverException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Cluster(args.success);
    }
    if (args.serverException !== undefined && args.serverException !== null) {
      this.serverException = args.serverException;
    }
  }
};
RemoteController_createClusterKeepClusterName_result.prototype = {};
RemoteController_createClusterKeepClusterName_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Cluster();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.serverException = new ttypes.ServerException();
        this.serverException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoteController_createClusterKeepClusterName_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteController_createClusterKeepClusterName_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.serverException !== null && this.serverException !== undefined) {
    output.writeFieldBegin('serverException', Thrift.Type.STRUCT, 1);
    this.serverException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RemoteController_startMember_args = function(args) {
  this.clusterId = null;
  if (args) {
    if (args.clusterId !== undefined && args.clusterId !== null) {
      this.clusterId = args.clusterId;
    }
  }
};
RemoteController_startMember_args.prototype = {};
RemoteController_startMember_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.clusterId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoteController_startMember_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteController_startMember_args');
  if (this.clusterId !== null && this.clusterId !== undefined) {
    output.writeFieldBegin('clusterId', Thrift.Type.STRING, 1);
    output.writeString(this.clusterId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RemoteController_startMember_result = function(args) {
  this.success = null;
  this.serverException = null;
  if (args instanceof ttypes.ServerException) {
    this.serverException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Member(args.success);
    }
    if (args.serverException !== undefined && args.serverException !== null) {
      this.serverException = args.serverException;
    }
  }
};
RemoteController_startMember_result.prototype = {};
RemoteController_startMember_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Member();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.serverException = new ttypes.ServerException();
        this.serverException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoteController_startMember_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteController_startMember_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.serverException !== null && this.serverException !== undefined) {
    output.writeFieldBegin('serverException', Thrift.Type.STRUCT, 1);
    this.serverException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RemoteController_shutdownMember_args = function(args) {
  this.clusterId = null;
  this.memberId = null;
  if (args) {
    if (args.clusterId !== undefined && args.clusterId !== null) {
      this.clusterId = args.clusterId;
    }
    if (args.memberId !== undefined && args.memberId !== null) {
      this.memberId = args.memberId;
    }
  }
};
RemoteController_shutdownMember_args.prototype = {};
RemoteController_shutdownMember_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.clusterId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.memberId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoteController_shutdownMember_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteController_shutdownMember_args');
  if (this.clusterId !== null && this.clusterId !== undefined) {
    output.writeFieldBegin('clusterId', Thrift.Type.STRING, 1);
    output.writeString(this.clusterId);
    output.writeFieldEnd();
  }
  if (this.memberId !== null && this.memberId !== undefined) {
    output.writeFieldBegin('memberId', Thrift.Type.STRING, 2);
    output.writeString(this.memberId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RemoteController_shutdownMember_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
RemoteController_shutdownMember_result.prototype = {};
RemoteController_shutdownMember_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoteController_shutdownMember_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteController_shutdownMember_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RemoteController_terminateMember_args = function(args) {
  this.clusterId = null;
  this.memberId = null;
  if (args) {
    if (args.clusterId !== undefined && args.clusterId !== null) {
      this.clusterId = args.clusterId;
    }
    if (args.memberId !== undefined && args.memberId !== null) {
      this.memberId = args.memberId;
    }
  }
};
RemoteController_terminateMember_args.prototype = {};
RemoteController_terminateMember_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.clusterId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.memberId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoteController_terminateMember_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteController_terminateMember_args');
  if (this.clusterId !== null && this.clusterId !== undefined) {
    output.writeFieldBegin('clusterId', Thrift.Type.STRING, 1);
    output.writeString(this.clusterId);
    output.writeFieldEnd();
  }
  if (this.memberId !== null && this.memberId !== undefined) {
    output.writeFieldBegin('memberId', Thrift.Type.STRING, 2);
    output.writeString(this.memberId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RemoteController_terminateMember_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
RemoteController_terminateMember_result.prototype = {};
RemoteController_terminateMember_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoteController_terminateMember_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteController_terminateMember_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RemoteController_suspendMember_args = function(args) {
  this.clusterId = null;
  this.memberId = null;
  if (args) {
    if (args.clusterId !== undefined && args.clusterId !== null) {
      this.clusterId = args.clusterId;
    }
    if (args.memberId !== undefined && args.memberId !== null) {
      this.memberId = args.memberId;
    }
  }
};
RemoteController_suspendMember_args.prototype = {};
RemoteController_suspendMember_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.clusterId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.memberId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoteController_suspendMember_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteController_suspendMember_args');
  if (this.clusterId !== null && this.clusterId !== undefined) {
    output.writeFieldBegin('clusterId', Thrift.Type.STRING, 1);
    output.writeString(this.clusterId);
    output.writeFieldEnd();
  }
  if (this.memberId !== null && this.memberId !== undefined) {
    output.writeFieldBegin('memberId', Thrift.Type.STRING, 2);
    output.writeString(this.memberId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RemoteController_suspendMember_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
RemoteController_suspendMember_result.prototype = {};
RemoteController_suspendMember_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoteController_suspendMember_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteController_suspendMember_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RemoteController_resumeMember_args = function(args) {
  this.clusterId = null;
  this.memberId = null;
  if (args) {
    if (args.clusterId !== undefined && args.clusterId !== null) {
      this.clusterId = args.clusterId;
    }
    if (args.memberId !== undefined && args.memberId !== null) {
      this.memberId = args.memberId;
    }
  }
};
RemoteController_resumeMember_args.prototype = {};
RemoteController_resumeMember_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.clusterId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.memberId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoteController_resumeMember_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteController_resumeMember_args');
  if (this.clusterId !== null && this.clusterId !== undefined) {
    output.writeFieldBegin('clusterId', Thrift.Type.STRING, 1);
    output.writeString(this.clusterId);
    output.writeFieldEnd();
  }
  if (this.memberId !== null && this.memberId !== undefined) {
    output.writeFieldBegin('memberId', Thrift.Type.STRING, 2);
    output.writeString(this.memberId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RemoteController_resumeMember_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
RemoteController_resumeMember_result.prototype = {};
RemoteController_resumeMember_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoteController_resumeMember_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteController_resumeMember_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RemoteController_shutdownCluster_args = function(args) {
  this.clusterId = null;
  if (args) {
    if (args.clusterId !== undefined && args.clusterId !== null) {
      this.clusterId = args.clusterId;
    }
  }
};
RemoteController_shutdownCluster_args.prototype = {};
RemoteController_shutdownCluster_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.clusterId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoteController_shutdownCluster_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteController_shutdownCluster_args');
  if (this.clusterId !== null && this.clusterId !== undefined) {
    output.writeFieldBegin('clusterId', Thrift.Type.STRING, 1);
    output.writeString(this.clusterId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RemoteController_shutdownCluster_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
RemoteController_shutdownCluster_result.prototype = {};
RemoteController_shutdownCluster_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoteController_shutdownCluster_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteController_shutdownCluster_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RemoteController_terminateCluster_args = function(args) {
  this.clusterId = null;
  if (args) {
    if (args.clusterId !== undefined && args.clusterId !== null) {
      this.clusterId = args.clusterId;
    }
  }
};
RemoteController_terminateCluster_args.prototype = {};
RemoteController_terminateCluster_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.clusterId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoteController_terminateCluster_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteController_terminateCluster_args');
  if (this.clusterId !== null && this.clusterId !== undefined) {
    output.writeFieldBegin('clusterId', Thrift.Type.STRING, 1);
    output.writeString(this.clusterId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RemoteController_terminateCluster_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
RemoteController_terminateCluster_result.prototype = {};
RemoteController_terminateCluster_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoteController_terminateCluster_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteController_terminateCluster_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RemoteController_splitMemberFromCluster_args = function(args) {
  this.memberId = null;
  if (args) {
    if (args.memberId !== undefined && args.memberId !== null) {
      this.memberId = args.memberId;
    }
  }
};
RemoteController_splitMemberFromCluster_args.prototype = {};
RemoteController_splitMemberFromCluster_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.memberId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoteController_splitMemberFromCluster_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteController_splitMemberFromCluster_args');
  if (this.memberId !== null && this.memberId !== undefined) {
    output.writeFieldBegin('memberId', Thrift.Type.STRING, 1);
    output.writeString(this.memberId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RemoteController_splitMemberFromCluster_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Cluster(args.success);
    }
  }
};
RemoteController_splitMemberFromCluster_result.prototype = {};
RemoteController_splitMemberFromCluster_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Cluster();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoteController_splitMemberFromCluster_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteController_splitMemberFromCluster_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RemoteController_mergeMemberToCluster_args = function(args) {
  this.clusterId = null;
  this.memberId = null;
  if (args) {
    if (args.clusterId !== undefined && args.clusterId !== null) {
      this.clusterId = args.clusterId;
    }
    if (args.memberId !== undefined && args.memberId !== null) {
      this.memberId = args.memberId;
    }
  }
};
RemoteController_mergeMemberToCluster_args.prototype = {};
RemoteController_mergeMemberToCluster_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.clusterId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.memberId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoteController_mergeMemberToCluster_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteController_mergeMemberToCluster_args');
  if (this.clusterId !== null && this.clusterId !== undefined) {
    output.writeFieldBegin('clusterId', Thrift.Type.STRING, 1);
    output.writeString(this.clusterId);
    output.writeFieldEnd();
  }
  if (this.memberId !== null && this.memberId !== undefined) {
    output.writeFieldBegin('memberId', Thrift.Type.STRING, 2);
    output.writeString(this.memberId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RemoteController_mergeMemberToCluster_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Cluster(args.success);
    }
  }
};
RemoteController_mergeMemberToCluster_result.prototype = {};
RemoteController_mergeMemberToCluster_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Cluster();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoteController_mergeMemberToCluster_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteController_mergeMemberToCluster_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RemoteController_executeOnController_args = function(args) {
  this.clusterId = null;
  this.script = null;
  this.lang = null;
  if (args) {
    if (args.clusterId !== undefined && args.clusterId !== null) {
      this.clusterId = args.clusterId;
    }
    if (args.script !== undefined && args.script !== null) {
      this.script = args.script;
    }
    if (args.lang !== undefined && args.lang !== null) {
      this.lang = args.lang;
    }
  }
};
RemoteController_executeOnController_args.prototype = {};
RemoteController_executeOnController_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.clusterId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.script = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.lang = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoteController_executeOnController_args.prototype.write = function(output) {
  output.writeStructBegin('RemoteController_executeOnController_args');
  if (this.clusterId !== null && this.clusterId !== undefined) {
    output.writeFieldBegin('clusterId', Thrift.Type.STRING, 1);
    output.writeString(this.clusterId);
    output.writeFieldEnd();
  }
  if (this.script !== null && this.script !== undefined) {
    output.writeFieldBegin('script', Thrift.Type.STRING, 2);
    output.writeString(this.script);
    output.writeFieldEnd();
  }
  if (this.lang !== null && this.lang !== undefined) {
    output.writeFieldBegin('lang', Thrift.Type.I32, 3);
    output.writeI32(this.lang);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RemoteController_executeOnController_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Response(args.success);
    }
  }
};
RemoteController_executeOnController_result.prototype = {};
RemoteController_executeOnController_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Response();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoteController_executeOnController_result.prototype.write = function(output) {
  output.writeStructBegin('RemoteController_executeOnController_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RemoteControllerClient = exports.Client = function(output, pClass) {
  this.output = output;
  this.pClass = pClass;
  this._seqid = 0;
  this._reqs = {};
};
RemoteControllerClient.prototype = {};
RemoteControllerClient.prototype.seqid = function() { return this._seqid; };
RemoteControllerClient.prototype.new_seqid = function() { return this._seqid += 1; };

RemoteControllerClient.prototype.ping = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_ping();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_ping();
  }
};

RemoteControllerClient.prototype.send_ping = function() {
  var output = new this.pClass(this.output);
  var args = new RemoteController_ping_args();
  try {
    output.writeMessageBegin('ping', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

RemoteControllerClient.prototype.recv_ping = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new RemoteController_ping_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('ping failed: unknown result');
};

RemoteControllerClient.prototype.clean = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_clean();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_clean();
  }
};

RemoteControllerClient.prototype.send_clean = function() {
  var output = new this.pClass(this.output);
  var args = new RemoteController_clean_args();
  try {
    output.writeMessageBegin('clean', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

RemoteControllerClient.prototype.recv_clean = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new RemoteController_clean_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('clean failed: unknown result');
};

RemoteControllerClient.prototype.exit = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_exit();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_exit();
  }
};

RemoteControllerClient.prototype.send_exit = function() {
  var output = new this.pClass(this.output);
  var args = new RemoteController_exit_args();
  try {
    output.writeMessageBegin('exit', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

RemoteControllerClient.prototype.recv_exit = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new RemoteController_exit_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('exit failed: unknown result');
};

RemoteControllerClient.prototype.createCluster = function(hzVersion, xmlconfig, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createCluster(hzVersion, xmlconfig);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createCluster(hzVersion, xmlconfig);
  }
};

RemoteControllerClient.prototype.send_createCluster = function(hzVersion, xmlconfig) {
  var output = new this.pClass(this.output);
  var params = {
    hzVersion: hzVersion,
    xmlconfig: xmlconfig
  };
  var args = new RemoteController_createCluster_args(params);
  try {
    output.writeMessageBegin('createCluster', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

RemoteControllerClient.prototype.recv_createCluster = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new RemoteController_createCluster_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.serverException) {
    return callback(result.serverException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createCluster failed: unknown result');
};

RemoteControllerClient.prototype.createClusterKeepClusterName = function(hzVersion, xmlconfig, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createClusterKeepClusterName(hzVersion, xmlconfig);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createClusterKeepClusterName(hzVersion, xmlconfig);
  }
};

RemoteControllerClient.prototype.send_createClusterKeepClusterName = function(hzVersion, xmlconfig) {
  var output = new this.pClass(this.output);
  var params = {
    hzVersion: hzVersion,
    xmlconfig: xmlconfig
  };
  var args = new RemoteController_createClusterKeepClusterName_args(params);
  try {
    output.writeMessageBegin('createClusterKeepClusterName', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

RemoteControllerClient.prototype.recv_createClusterKeepClusterName = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new RemoteController_createClusterKeepClusterName_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.serverException) {
    return callback(result.serverException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createClusterKeepClusterName failed: unknown result');
};

RemoteControllerClient.prototype.startMember = function(clusterId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_startMember(clusterId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_startMember(clusterId);
  }
};

RemoteControllerClient.prototype.send_startMember = function(clusterId) {
  var output = new this.pClass(this.output);
  var params = {
    clusterId: clusterId
  };
  var args = new RemoteController_startMember_args(params);
  try {
    output.writeMessageBegin('startMember', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

RemoteControllerClient.prototype.recv_startMember = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new RemoteController_startMember_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.serverException) {
    return callback(result.serverException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('startMember failed: unknown result');
};

RemoteControllerClient.prototype.shutdownMember = function(clusterId, memberId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_shutdownMember(clusterId, memberId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_shutdownMember(clusterId, memberId);
  }
};

RemoteControllerClient.prototype.send_shutdownMember = function(clusterId, memberId) {
  var output = new this.pClass(this.output);
  var params = {
    clusterId: clusterId,
    memberId: memberId
  };
  var args = new RemoteController_shutdownMember_args(params);
  try {
    output.writeMessageBegin('shutdownMember', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

RemoteControllerClient.prototype.recv_shutdownMember = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new RemoteController_shutdownMember_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('shutdownMember failed: unknown result');
};

RemoteControllerClient.prototype.terminateMember = function(clusterId, memberId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_terminateMember(clusterId, memberId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_terminateMember(clusterId, memberId);
  }
};

RemoteControllerClient.prototype.send_terminateMember = function(clusterId, memberId) {
  var output = new this.pClass(this.output);
  var params = {
    clusterId: clusterId,
    memberId: memberId
  };
  var args = new RemoteController_terminateMember_args(params);
  try {
    output.writeMessageBegin('terminateMember', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

RemoteControllerClient.prototype.recv_terminateMember = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new RemoteController_terminateMember_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('terminateMember failed: unknown result');
};

RemoteControllerClient.prototype.suspendMember = function(clusterId, memberId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_suspendMember(clusterId, memberId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_suspendMember(clusterId, memberId);
  }
};

RemoteControllerClient.prototype.send_suspendMember = function(clusterId, memberId) {
  var output = new this.pClass(this.output);
  var params = {
    clusterId: clusterId,
    memberId: memberId
  };
  var args = new RemoteController_suspendMember_args(params);
  try {
    output.writeMessageBegin('suspendMember', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

RemoteControllerClient.prototype.recv_suspendMember = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new RemoteController_suspendMember_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('suspendMember failed: unknown result');
};

RemoteControllerClient.prototype.resumeMember = function(clusterId, memberId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_resumeMember(clusterId, memberId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_resumeMember(clusterId, memberId);
  }
};

RemoteControllerClient.prototype.send_resumeMember = function(clusterId, memberId) {
  var output = new this.pClass(this.output);
  var params = {
    clusterId: clusterId,
    memberId: memberId
  };
  var args = new RemoteController_resumeMember_args(params);
  try {
    output.writeMessageBegin('resumeMember', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

RemoteControllerClient.prototype.recv_resumeMember = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new RemoteController_resumeMember_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('resumeMember failed: unknown result');
};

RemoteControllerClient.prototype.shutdownCluster = function(clusterId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_shutdownCluster(clusterId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_shutdownCluster(clusterId);
  }
};

RemoteControllerClient.prototype.send_shutdownCluster = function(clusterId) {
  var output = new this.pClass(this.output);
  var params = {
    clusterId: clusterId
  };
  var args = new RemoteController_shutdownCluster_args(params);
  try {
    output.writeMessageBegin('shutdownCluster', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

RemoteControllerClient.prototype.recv_shutdownCluster = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new RemoteController_shutdownCluster_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('shutdownCluster failed: unknown result');
};

RemoteControllerClient.prototype.terminateCluster = function(clusterId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_terminateCluster(clusterId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_terminateCluster(clusterId);
  }
};

RemoteControllerClient.prototype.send_terminateCluster = function(clusterId) {
  var output = new this.pClass(this.output);
  var params = {
    clusterId: clusterId
  };
  var args = new RemoteController_terminateCluster_args(params);
  try {
    output.writeMessageBegin('terminateCluster', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

RemoteControllerClient.prototype.recv_terminateCluster = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new RemoteController_terminateCluster_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('terminateCluster failed: unknown result');
};

RemoteControllerClient.prototype.splitMemberFromCluster = function(memberId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_splitMemberFromCluster(memberId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_splitMemberFromCluster(memberId);
  }
};

RemoteControllerClient.prototype.send_splitMemberFromCluster = function(memberId) {
  var output = new this.pClass(this.output);
  var params = {
    memberId: memberId
  };
  var args = new RemoteController_splitMemberFromCluster_args(params);
  try {
    output.writeMessageBegin('splitMemberFromCluster', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

RemoteControllerClient.prototype.recv_splitMemberFromCluster = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new RemoteController_splitMemberFromCluster_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('splitMemberFromCluster failed: unknown result');
};

RemoteControllerClient.prototype.mergeMemberToCluster = function(clusterId, memberId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_mergeMemberToCluster(clusterId, memberId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_mergeMemberToCluster(clusterId, memberId);
  }
};

RemoteControllerClient.prototype.send_mergeMemberToCluster = function(clusterId, memberId) {
  var output = new this.pClass(this.output);
  var params = {
    clusterId: clusterId,
    memberId: memberId
  };
  var args = new RemoteController_mergeMemberToCluster_args(params);
  try {
    output.writeMessageBegin('mergeMemberToCluster', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

RemoteControllerClient.prototype.recv_mergeMemberToCluster = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new RemoteController_mergeMemberToCluster_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('mergeMemberToCluster failed: unknown result');
};

RemoteControllerClient.prototype.executeOnController = function(clusterId, script, lang, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_executeOnController(clusterId, script, lang);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_executeOnController(clusterId, script, lang);
  }
};

RemoteControllerClient.prototype.send_executeOnController = function(clusterId, script, lang) {
  var output = new this.pClass(this.output);
  var params = {
    clusterId: clusterId,
    script: script,
    lang: lang
  };
  var args = new RemoteController_executeOnController_args(params);
  try {
    output.writeMessageBegin('executeOnController', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

RemoteControllerClient.prototype.recv_executeOnController = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new RemoteController_executeOnController_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('executeOnController failed: unknown result');
};
var RemoteControllerProcessor = exports.Processor = function(handler) {
  this._handler = handler;
};
RemoteControllerProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
};
RemoteControllerProcessor.prototype.process_ping = function(seqid, input, output) {
  var args = new RemoteController_ping_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.ping.length === 0) {
    Q.fcall(this._handler.ping.bind(this._handler)
    ).then(function(result) {
      var result_obj = new RemoteController_ping_result({success: result});
      output.writeMessageBegin("ping", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("ping", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.ping(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new RemoteController_ping_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("ping", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("ping", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
RemoteControllerProcessor.prototype.process_clean = function(seqid, input, output) {
  var args = new RemoteController_clean_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.clean.length === 0) {
    Q.fcall(this._handler.clean.bind(this._handler)
    ).then(function(result) {
      var result_obj = new RemoteController_clean_result({success: result});
      output.writeMessageBegin("clean", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("clean", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.clean(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new RemoteController_clean_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("clean", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("clean", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
RemoteControllerProcessor.prototype.process_exit = function(seqid, input, output) {
  var args = new RemoteController_exit_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.exit.length === 0) {
    Q.fcall(this._handler.exit.bind(this._handler)
    ).then(function(result) {
      var result_obj = new RemoteController_exit_result({success: result});
      output.writeMessageBegin("exit", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("exit", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.exit(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new RemoteController_exit_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("exit", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("exit", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
RemoteControllerProcessor.prototype.process_createCluster = function(seqid, input, output) {
  var args = new RemoteController_createCluster_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.createCluster.length === 2) {
    Q.fcall(this._handler.createCluster.bind(this._handler),
      args.hzVersion,
      args.xmlconfig
    ).then(function(result) {
      var result_obj = new RemoteController_createCluster_result({success: result});
      output.writeMessageBegin("createCluster", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ServerException) {
        result = new RemoteController_createCluster_result(err);
        output.writeMessageBegin("createCluster", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createCluster", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.createCluster(args.hzVersion, args.xmlconfig, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServerException) {
        result_obj = new RemoteController_createCluster_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("createCluster", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createCluster", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
RemoteControllerProcessor.prototype.process_createClusterKeepClusterName = function(seqid, input, output) {
  var args = new RemoteController_createClusterKeepClusterName_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.createClusterKeepClusterName.length === 2) {
    Q.fcall(this._handler.createClusterKeepClusterName.bind(this._handler),
      args.hzVersion,
      args.xmlconfig
    ).then(function(result) {
      var result_obj = new RemoteController_createClusterKeepClusterName_result({success: result});
      output.writeMessageBegin("createClusterKeepClusterName", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ServerException) {
        result = new RemoteController_createClusterKeepClusterName_result(err);
        output.writeMessageBegin("createClusterKeepClusterName", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createClusterKeepClusterName", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.createClusterKeepClusterName(args.hzVersion, args.xmlconfig, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServerException) {
        result_obj = new RemoteController_createClusterKeepClusterName_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("createClusterKeepClusterName", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createClusterKeepClusterName", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
RemoteControllerProcessor.prototype.process_startMember = function(seqid, input, output) {
  var args = new RemoteController_startMember_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.startMember.length === 1) {
    Q.fcall(this._handler.startMember.bind(this._handler),
      args.clusterId
    ).then(function(result) {
      var result_obj = new RemoteController_startMember_result({success: result});
      output.writeMessageBegin("startMember", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ServerException) {
        result = new RemoteController_startMember_result(err);
        output.writeMessageBegin("startMember", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("startMember", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.startMember(args.clusterId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServerException) {
        result_obj = new RemoteController_startMember_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("startMember", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("startMember", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
RemoteControllerProcessor.prototype.process_shutdownMember = function(seqid, input, output) {
  var args = new RemoteController_shutdownMember_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.shutdownMember.length === 2) {
    Q.fcall(this._handler.shutdownMember.bind(this._handler),
      args.clusterId,
      args.memberId
    ).then(function(result) {
      var result_obj = new RemoteController_shutdownMember_result({success: result});
      output.writeMessageBegin("shutdownMember", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("shutdownMember", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.shutdownMember(args.clusterId, args.memberId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new RemoteController_shutdownMember_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("shutdownMember", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("shutdownMember", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
RemoteControllerProcessor.prototype.process_terminateMember = function(seqid, input, output) {
  var args = new RemoteController_terminateMember_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.terminateMember.length === 2) {
    Q.fcall(this._handler.terminateMember.bind(this._handler),
      args.clusterId,
      args.memberId
    ).then(function(result) {
      var result_obj = new RemoteController_terminateMember_result({success: result});
      output.writeMessageBegin("terminateMember", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("terminateMember", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.terminateMember(args.clusterId, args.memberId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new RemoteController_terminateMember_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("terminateMember", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("terminateMember", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
RemoteControllerProcessor.prototype.process_suspendMember = function(seqid, input, output) {
  var args = new RemoteController_suspendMember_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.suspendMember.length === 2) {
    Q.fcall(this._handler.suspendMember.bind(this._handler),
      args.clusterId,
      args.memberId
    ).then(function(result) {
      var result_obj = new RemoteController_suspendMember_result({success: result});
      output.writeMessageBegin("suspendMember", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("suspendMember", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.suspendMember(args.clusterId, args.memberId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new RemoteController_suspendMember_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("suspendMember", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("suspendMember", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
RemoteControllerProcessor.prototype.process_resumeMember = function(seqid, input, output) {
  var args = new RemoteController_resumeMember_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.resumeMember.length === 2) {
    Q.fcall(this._handler.resumeMember.bind(this._handler),
      args.clusterId,
      args.memberId
    ).then(function(result) {
      var result_obj = new RemoteController_resumeMember_result({success: result});
      output.writeMessageBegin("resumeMember", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("resumeMember", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.resumeMember(args.clusterId, args.memberId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new RemoteController_resumeMember_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("resumeMember", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("resumeMember", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
RemoteControllerProcessor.prototype.process_shutdownCluster = function(seqid, input, output) {
  var args = new RemoteController_shutdownCluster_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.shutdownCluster.length === 1) {
    Q.fcall(this._handler.shutdownCluster.bind(this._handler),
      args.clusterId
    ).then(function(result) {
      var result_obj = new RemoteController_shutdownCluster_result({success: result});
      output.writeMessageBegin("shutdownCluster", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("shutdownCluster", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.shutdownCluster(args.clusterId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new RemoteController_shutdownCluster_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("shutdownCluster", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("shutdownCluster", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
RemoteControllerProcessor.prototype.process_terminateCluster = function(seqid, input, output) {
  var args = new RemoteController_terminateCluster_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.terminateCluster.length === 1) {
    Q.fcall(this._handler.terminateCluster.bind(this._handler),
      args.clusterId
    ).then(function(result) {
      var result_obj = new RemoteController_terminateCluster_result({success: result});
      output.writeMessageBegin("terminateCluster", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("terminateCluster", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.terminateCluster(args.clusterId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new RemoteController_terminateCluster_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("terminateCluster", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("terminateCluster", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
RemoteControllerProcessor.prototype.process_splitMemberFromCluster = function(seqid, input, output) {
  var args = new RemoteController_splitMemberFromCluster_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.splitMemberFromCluster.length === 1) {
    Q.fcall(this._handler.splitMemberFromCluster.bind(this._handler),
      args.memberId
    ).then(function(result) {
      var result_obj = new RemoteController_splitMemberFromCluster_result({success: result});
      output.writeMessageBegin("splitMemberFromCluster", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("splitMemberFromCluster", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.splitMemberFromCluster(args.memberId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new RemoteController_splitMemberFromCluster_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("splitMemberFromCluster", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("splitMemberFromCluster", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
RemoteControllerProcessor.prototype.process_mergeMemberToCluster = function(seqid, input, output) {
  var args = new RemoteController_mergeMemberToCluster_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.mergeMemberToCluster.length === 2) {
    Q.fcall(this._handler.mergeMemberToCluster.bind(this._handler),
      args.clusterId,
      args.memberId
    ).then(function(result) {
      var result_obj = new RemoteController_mergeMemberToCluster_result({success: result});
      output.writeMessageBegin("mergeMemberToCluster", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("mergeMemberToCluster", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.mergeMemberToCluster(args.clusterId, args.memberId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new RemoteController_mergeMemberToCluster_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("mergeMemberToCluster", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("mergeMemberToCluster", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
RemoteControllerProcessor.prototype.process_executeOnController = function(seqid, input, output) {
  var args = new RemoteController_executeOnController_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.executeOnController.length === 3) {
    Q.fcall(this._handler.executeOnController.bind(this._handler),
      args.clusterId,
      args.script,
      args.lang
    ).then(function(result) {
      var result_obj = new RemoteController_executeOnController_result({success: result});
      output.writeMessageBegin("executeOnController", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("executeOnController", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.executeOnController(args.clusterId, args.script, args.lang, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new RemoteController_executeOnController_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("executeOnController", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("executeOnController", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
